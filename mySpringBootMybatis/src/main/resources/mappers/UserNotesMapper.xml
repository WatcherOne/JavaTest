<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    * mapper映射文件，以XML为基础，使用与SQL语句对应的SQL标签来构建SQL语句
    1. mapper：    配置Mapper映射文件对应的Mapper接口类
    2. resultMap： 查询语句结果集【描述如何从数据库结果集中加载对象】
    3. result：    用于定义resultMap标签中的字段
    4. id:         用于定义resultMap标签中的主键字段
    5. collection: 集合数据，如 List<User> 这种数据
    6. sql：       定义SQL语句块供其他SQL语句使用
    7. select：    查询语句
    8. insert：    插入语句
    9. update：    更新语句
    10.delete：    删除语句
-->
<mapper namespace="com.watcher.mapper.UserNotesMapper">
    <!--
        select元素的常用属性
        1. id：  在命令空间中唯一标识符，可以用来引用这条语句
        2. parameterType:  将会传入这条语句的参数【类全限定名或别名】，可选，默认值 unset
        3. resultType:     这条语句返回结果的类全限定名或别名
        4. resultMap:      对外部 resultMap 的命名引用，结果映射，resultType 与 resultMap之间只能同时使用一个
        5. flushCache：    将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false
        6. useCache：      将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：true
    -->

    <!--
        返回类型
        1. 实体类
        2. list集合
        3. map集合（当多条数据时，需要用list接受，List<Map<>>）
            或者在mapper接口处通过注解 @MapKey("id") 来设置map对象中某一个键值作为 返回Map对象的键，而map本身作为返回Map对象的值
    -->

    <!--    <select id="getUserList" resultType="User">-->
    <!--        select-->
    <!--            <include refid="userColumns">-->
    <!--                <property name="col" value="user"></property>-->
    <!--            </include>-->
    <!--        from user-->
    <!--    </select>-->
    <select id="getUserList" resultMap="userResultMap">
        select * from user
    </select>

    <!--
        mybatis获取参数值的情况
        1. mapper接口方法的参数为单个字面量类型
            可通过 #{}(本质占位符赋值) 和 ${}(本质字符串拼接) 以任意的字符串获取参数值
            默认情况下，使用 #{} 参数语法时, mybatis会创建参数占位符 ?
            如果想在sql语句中直接插入一个不转义的字符串时，用 ${} 这字符串替换
            ${}是字符串拼接，一定要注意''问题，如 username = '${username}'
        2. 多个参数时，用 Available parameters are [arg0, arg1, param1, param2]
            放在集合中，但 mybatis-spring 好像把 map 集合中的 arg0，arg1 改成了参数本身字段来传输
        3. 若mapper接口方法参数多个时，将参数放在一个自定义的map集合中
            然后通过map中健值的方式访问即可,同第二种，第二种是mybatis放到集合中，而这一种是自己手动放的
        4. 若mapper接口方法参数是一个实体类对象，则通过属性名获取值即可
            属性跟成员变量不完全一样（属性指的是 getUserName(),因为没有成员变量也可能有属性，所以主要看get set）
        5. 主要是一个注解：@Param("") 命名参数！来解决第1/2/3点的不足
            在mapper接口方法参数加注解
            mybatis源码中 convertArgsToSqlCommandParam这个方法就是转换成sql语句的参数
            ParamNameResolver 这个方法来解析获取参数名的
            getParameterAnnotations 获得参数的注解
            if (annotation instanceof Param) name = ((Param)annotation).value();
            上面就是获得@Param拿取参数的方式

        总结：参数为实体类 和 @Param()
    -->
    <select id="getUserListByColumn" resultType="User">
        select * from user where ${column}=#{value}
    </select>

    <!--
        用于定义可重用的 SQL 代码片段
        用 <include> 来使用 和 <property> 来定义不同的参数
        可以 嵌套使用（在sql元素中也可以 include 一个其它sql标签）
        可以 引用其它 xml文件中的 sql
        ${}来获取传入sql中的参数
        * select 的字段必须与数据库一致
     -->
    <sql id="userColumns">
        id, ${col}.user_code, ${col}.nick_name as userName, ${col}.password
    </sql>

    <!--  resultMap 映射结果，可以解决列名不匹配结果  -->
    <!--  id: 使用resultMap时的唯一标识符  type：对应的类型 -->
    <!--  result元素是可配置的，如果不配某些字段也不影响 User 实体中的其它字段, 会自动映射  -->
    <!--
        resultMap 更加复杂的说明，resultMap 元素有很多子元素和一个值得深入探讨的结构
        1. <constructor>： 用于在实例化类时,注入结果到构造方法中
        2. <id>: 一个ID结果，标记出作为ID的结果可以帮助提高整体性能
        3. <result>:  注入到字段或JavaBean属性的普通结果
        4. <association>: 一个复杂类型的关联；许多结果将包装成这种类型;
            * 嵌套结果映射 – 关联可以是 resultMap 元素，或是对其它结果映射的引用
        5. <collection>:  一个复杂类型的集合
            * 嵌套结果映射 – 集合可以是 resultMap 元素，或是对其它结果映射的引用
        6. <discriminator>: 鉴别器，可以选择返回多个不同的结果集
               <case>:
    -->
    <resultMap id="userResultMap" type="User">
        <!--  id 标签必须要有，好像否则id值映射不到！？  -->
        <id property="id" column="id"></id>
        <result property="userName" column="user_name"></result>
        <result property="idCard" column="id_card"></result>
    </resultMap>

    <!--  insert update delete 元素的属性跟 select差不多；没有resultType与resultMap   -->
    <insert id="addUser" parameterType="User">
        insert into user values(null, #{userName}, #{age}, #{sex}, #{idCard}, #{password})
    </insert>

    <update id="updateUser" parameterType="User">
        update
            user
        set
            user_name = #{userName},
            age = #{age},
            sex = #{sex},
            id_card = #{idCard},
            password = #{password}
        where id = #{id}
    </update>
</mapper>